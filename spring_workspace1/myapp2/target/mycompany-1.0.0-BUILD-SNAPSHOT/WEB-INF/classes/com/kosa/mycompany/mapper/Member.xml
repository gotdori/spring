<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	 
<mapper namespace="Member">
<!--  
namespace는 쿼리 간에 아이디 식별에 사용함
그치만 현재 거의 사용 안함.

쿼리를 파일에 저장한다. 태그는 select, insert, update, delete가 있다.

id는 쿼리를 식별하기 위한 고유값인데 프로젝트를 통틀어서 하나만 있어야 한다. 다른 쿼리 xml파일에 이 아아디가 있으면 안된다.
paramType : "클래스명", 파라미터로 전달 될 클래스명을 기술한다. 여기에 기술한 파라미터로 값을 전달해야한다.
mybatis-config.xml에 기술한 typealias에서 지정한 클래스명을 사용하면 된다. 본래는 패키지명을 포함한 클래스명을 써야한다.
com.kosa.mycompany.guestbook.Guestbook을 다 기술해야만 하지만 보통은 typealias를 지정하고 거기서 지정한 값만을 사용한다.
resultType="클래스명" 결과를 받아가고자 하는 클래스명을 기술한다. 반환데이터를 resultType에서 지정한 클래스로 객체를 만들고 객체에 setter로 호출해 값을 넣은 다음 ArrayList객체에 담아서 보낸다. 만일 DB데이블의 필드명과 클래스 변수명이 다를 경우에는 둘을 연결하기 위한 map이라는 것을 만들어서 전달한다. 그 때는 paramMap이나 resultMap을 xml로 만들어서 전달해야 한다.
-->

	<!-- 선행쿼리, 후행쿼리 : 쿼리를 여러개 묶어서 한번에 처리, MyBatis -->
	<insert id="Member_insert" parameterType="MemberDto">
	<!-- select 쿼리를 먼저 진행하도록 resultType 반환이 Integer -->
		<selectKey resultType="String" keyProperty="member_id" order="BEFORE" >
		    select nvl(max(member_id),0)+1 as member_id
   			from tb_member
		</selectKey>
		insert into tb_member
		(
			member_id
			,user_id
			,user_name
			,password
			,phone
			,email
		)
		values
		(
			#{member_id}
			,#{user_id}
			,#{password}
			,#{phone}
			,#{email}
			,#{user_name}
		)
		</insert>
		
		<!-- id 중복체크 -->
		<select id="Member_idcheck" parameterType="MemberDto" resultType="Integer">
		select count(*) from tb_member where user_id=#{user_id}
		</select>
		
		
		<!-- log on 아이디와 패스워드 가져와서 정보 가져오기 -->
		<select id="Member_login" parameterType="MemberDto" resultType="MemberDto">
		select * from tb_member where user_id=#{user_id}
		</select>
		
		<!-- id 이름이랑 이메일 넣고 아이디 찾기 -->
		<select id="member_findId" parameterType="MemberDto" resultType="MemberDto">
		select * from tb_member where user_name=#{user_name} and email=#{email}
		</select>
		
		<!-- list 5개만 불러오기 -->
		<select id="Member_listData" parameterType="MemberDto" resultType="MemberDto">
		select A.*
		from(
		select member_id, 
		user_id, password, 
		user_name, phone, 
		email, 
		row_number() over(order by member_id desc) num,
		ceil(row_number() over(order by member_id desc)/10)-1 pg 
		from tb_member
		) A 
		where pg=#{pg} 
		</select>
		
		<select id="Member_totalCnt" parameterType="MemberDto" resultType="Integer">
		select count(*) from tb_member
		</select>
</mapper>